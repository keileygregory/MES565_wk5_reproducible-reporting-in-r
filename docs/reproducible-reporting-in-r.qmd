---
title: "Data Wrangling and Visualization in R"
subtitle: "Reproducible Reporting in R"
author: "MMES Fall 2025"
format: 
  revealjs:
    theme: simple
    slide-number: true
    chalkboard: true
---

## Reproducible Reporting: R Markdown & Quarto

The goal of reproducible reporting is to create dynamic documents that weave together your code, results (plots, tables), and narrative text.

-   **R Markdown** (`.Rmd`) is the classic, powerful tool for this in the R ecosystem.
-   **Quarto** (`.qmd`) is the next-generation version of R Markdown. It is multi-language (supporting Python, Julia, etc.) and has additional features.
-   **The core skills are the same!** Everything you learn here applies to both systems.

---

## The YAML Header

Every R Markdown (`.Rmd`) and Quarto (`.qmd`) document starts with a YAML header, enclosed in triple-dashes (`---`). This section contains metadata for your document.

```yaml
---
title: "My Coral Reef Report"
author: "Your Name"
date: "2025-07-26"
format: html
bibliography: references.bib
---
```

---

## YAML Header Options

-   **`title`**, **`author`**, **`date`**: Basic document information that appears at the top of your report.
-   **`format`**: The output format. Common options include `html`, `pdf`, `docx`, and `revealjs` for presentations.
-   **`bibliography`**: Path to a `.bib` file for managing citations.

---

## Markdown Syntax Basics

Outside of code chunks, you write text using Markdown, a simple syntax for formatting.

| Syntax               | Example                 | Output                |
| -------------------- | ----------------------- | --------------------- |
| `**Bold**`           | `**Important**`         | **Important** |
| `*Italics*`          | `*Acropora palmata*`    | *Acropora palmata* |
| `` `Code` ``         | `` `filter()` ``        | `filter()`            |
| `> Blockquote`       | `> A quote.`            | > A quote.            |
| `[Link](url)`        | `[RStudio](rstudio.com)`| [RStudio](rstudio.com)|
| `Superscript^2^`     | `cm^2^`                 | cm^2^                 |

---

## Unordered Lists

Use asterisks (`*`), hyphens (`-`), or plus signs (`+`) for unordered lists. Indent for nested lists.

```markdown
* First item
* Second item
    - A nested item
    - Another nested item
* Third item
```

* First item
* Second item
    * A nested item
    * Another nested item
* Third item

---

## Ordered Lists

Use numbers followed by a period for ordered lists.

```markdown
1.  Step one: Collect the data.
2.  Step two: Analyze the data.
    1.  Run statistical tests.
    2.  Generate plots.
3.  Step three: Write the report.
```

1.  Step one: Collect the data.
2.  Step two: Analyze the data.
    1.  Run statistical tests.
    2.  Generate plots.
3.  Step three: Write the report.

---

## Section Headers

You use hashtags (`#`) to create section headers. This is how you create new slides in a Reveal.js presentation.

```markdown
# A Level 1 Header (Rarely used in presentations)

## A Level 2 Header (Creates a new slide)

### A Level 3 Header (A smaller header on the same slide)

#### A Level 4 Header
```
# A Level 1 Header (Rarely used in presentations)

## A Level 2 Header (Creates a new slide)

### A Level 3 Header (A smaller header on the same slide)

#### A Level 4 Header

---

## Anatomy of a Code Chunk

Code chunks are the heart of your document. Let's break one down line by line.

```{r, eval=FALSE, echo=TRUE, purl=FALSE}
# The line below is the "opening fence". 
# It specifies the language (r), a unique chunk name, and options.
` ``{r example-chunk, eval=FALSE}`

# Below is the body of the chunk, containing standard R code.
library(tidyverse)
data <- mydataframe
mydataframe %>% 
  filter(species == "O.frank")
print(mydataframe)

# The line below is the "closing fence". It's essential.
` ``
```

---

## Code Chunk Options

Options inside the `{}` give you precise control over your output.

-   `echo = TRUE` (the default): Show the R code in your report.
-   `echo = FALSE`: Hide the R code, but still show the output (e.g., the plot or table).

-   `eval = TRUE` (the default): Run the code.
-   `eval = FALSE`: Do *not* run the code. The code block will be shown as plain text.

---

## More Chunk Options

-   `include = FALSE`: Run the code, but don't include the code *or* its output in the final document.
-   `warning = FALSE`: Hide any warning messages.
-   `message = FALSE`: Hide any informational messages.
-   `fig.cap = "My Caption"`: Adds a caption to a plot generated by the chunk.

---

## The Setup Chunk

It's a best practice to have a `setup` chunk at the very top of your document.

-   **Name**: `setup`
-   **Option**: `include = FALSE` (This is crucial, as you never want this chunk to appear in your report).

**Purpose:**
1.  Load all necessary packages (e.g., `library(tidyverse)`).
2.  Set global chunk options for the entire document using `knitr::opts_chunk$set()`.

---

## Example Setup Chunk

This is what the code *inside* your setup chunk should look like.

```{r, eval=FALSE, echo=TRUE}
# Load all packages needed for the report
library(tidyverse)
library(knitr)

# Set options for all subsequent code chunks in the document
knitr::opts_chunk$set(
  echo = TRUE,      # Show code by default
  warning = FALSE,  # Don't show warnings
  message = FALSE   # Don't show messages
)
```

---

## Organizing with Tabsets

You can create tabbed sections to organize content like plots, tables, and text. This is especially useful in HTML reports.
[Click here to see a live example of a tabset in an HTML document.](https://jeremiaheb.github.io/TMMP/#tree-sizes)

**How to create a tabset:**

1.  Create a level 2 header (`##`) and add the `.tabset` class to it. For example: `## My Analysis {.tabset}`.
2.  Underneath, create a level 3 header (`###`) for each tab you want. For example: `### Plot` and `### Data`.
3.  Place your content (like code chunks or text) under the appropriate level 3 header.



---

## Citations: The Workflow

R Markdown and Quarto have built-in support for citations. The process is:

1.  Create a bibliography file (e.g., `references.bib`).
2.  Add `bibliography: references.bib` to your YAML header.
3.  Cite sources in your text using a citation key like `[@key]`.

---

## Citations: The `.bib` File

Your bibliography file contains entries for each source in a standard format.

**Example `.bib` entry:**
```
@article{towl2022,
  title={A national status report on united states coral reefs based on 2012-2018 data from national coral reef monitoring program},
  author={Towl, E and Donovan, E and Kelsey, H and et al.},
  year={2022}
}
```
The first line, `towl2022`, is the unique citation key.

---

## Citations: In Your Text

You use the citation key to reference the source in your document.

**In your text:**
`This was shown in a recent report [@towl2022].`

**Rendered Output:**
This will be rendered as: "This was shown in a recent report (Towl et al. 2022)." A full reference list will be automatically generated at the end of your document.
